openapi: 3.0.0
info:
  title: Tempus Tours
  version: 0.1.0
  description: Connecting tour guides with customers
  contact:
    name: Ed
    url: 'https://edjones.me'
    email: contact@edjones.me
servers:
  - description: Local API
    url: 'http://127.0.0.1:5000'
paths:
  '/user/{uuid}':
    get:
      tags:
        - user
      parameters:
        - name: uuid
          in: path
          description: The UUID to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples: {}
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      operationId: addUser
      description: Get user by UUID
      summary: Get user by uuid
    put:
      description: |-
        Updates user by UUID
        This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: uuid
          in: path
          description: uuid of user that need to be updated
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User successfully updated
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
      summary: Updated user
      tags:
        - user
    delete:
      tags:
        - user
      summary: Delete user
      description: |-
        Deletes the specified user by UUID.
        This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: uuid
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User successfully deleted
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    parameters:
      - schema:
          type: string
        name: uuid
        in: path
        required: true
  /user/logout:
    get:
      tags:
        - user
      operationId: logoutUser
      responses:
        '200':
          description: Successfully logged out
      description: Logs out current logged in user session
      summary: Logout User
  /user/login:
    post:
      tags:
        - user
      description: Logs user into the system
      parameters: []
      responses:
        '200':
          description: Successfully logged in
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
      operationId: loginUser
      summary: Login User
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      responses:
        '200':
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Created user object
        required: true
  /tours:
    parameters: []
    get:
      summary: Get Tours
      operationId: get-tours
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Tour
                type: array
                items:
                  $ref: '#/components/schemas/Tour'
              examples:
                example-1: {}
      description: Returns a list of tours given certain parameters
      parameters:
        - schema:
            type: number
            default: 10
            maximum: 100
            minimum: 0
            exclusiveMaximum: true
          in: query
          name: 'no'
          description: Number of tours in returned list
        - schema:
            type: array
            enum:
              - animals
              - beaches
              - cooking
              - hiking
              - group
              - all
            default: all
          in: query
          description: Tour category
          name: category
        - schema:
            type: array
            enum:
              - rating
              - duration
              - price
              - upload_time
            maxLength: 0
          in: query
          name: order_by
          description: Criteria to order the returned list by
        - schema:
            type: number
          in: query
          name: max_distance
          description: The maximum distance to get results for (km)
        - schema:
            type: number
          in: query
          name: min_distance
          description: The maximum distance to get results for (km)
        - schema:
            type: number
          in: query
          name: max_rating
          description: The maximum rating to get results for
        - schema:
            type: number
          in: query
          name: min_rating
          description: The minimum rating to get results for
        - schema:
            type: integer
          in: query
          name: max_age
          description: The maximum age to get results for (days)
        - schema:
            type: integer
          in: query
          name: min_age
          description: The minimum age to get results for (days)
        - schema:
            type: integer
          in: query
          name: max_duration
          description: The maximum duration to get results for (minutes)
        - schema:
            type: integer
          in: query
          name: min_duration
          description: The minimum duration to get results for (minutes)
        - schema:
            type: number
          in: query
          name: max_price
          description: The maximum price to get results for
        - schema:
            type: number
          in: query
          name: min_price
          description: The minimum price to get results for
        - schema:
            type: string
            enum:
              - asc
              - desc
          in: query
          name: sort
          description: Whether to order by ascending
      tags:
        - tours
  '/tour/{uuid}':
    parameters:
      - schema:
          type: string
        name: uuid
        in: path
        required: true
    get:
      summary: Get Tour By UUID
      tags:
        - tours
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'
              examples:
                example-1: {}
      operationId: get-tour-uuid
      description: Get tour details by UUID
    put:
      summary: ''
      operationId: put-tour-uuid
      responses:
        '200':
          description: OK
      description: Update an existing tour by UUID
      tags:
        - tours
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tour'
    delete:
      summary: ''
      operationId: delete-tour-uuid
      responses:
        '200':
          description: OK
      description: Delete an existing tour by UUID
      tags:
        - tours
      requestBody: {}
  /tour:
    post:
      summary: Add tour
      operationId: post-tour
      responses:
        '200':
          description: OK
      description: Add a tour
      tags:
        - tours
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tour'
        description: ''
components:
  schemas:
    User:
      type: object
      x-examples: {}
      title: ''
      x-tags:
        - user
      properties:
        uuid:
          type: string
          default: uuid_generate_v1()
          format: int32
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        firstname:
          type: string
        lastname:
          type: string
        dob:
          type: string
        mobile:
          type: string
        customer_rating:
          type: number
        customer_rating_count:
          type: integer
        guide_rating:
          type: number
        guide_rating_count:
          type: integer
        bio:
          type: string
        photo:
          type: string
        url:
          type: string
        date_created:
          type: string
        location:
          type: string
        languages:
          type: array
          items:
            $ref: '#/components/schemas/Language'
        emergency_contacts:
          type: array
          items:
            $ref: '#/components/schemas/EmergencyContact'
      required:
        - email
        - password
        - firstname
        - lastname
    Tour:
      title: Tour
      type: object
      x-examples: {}
      x-tags:
        - tours
      properties:
        guide_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        rating:
          type: number
        uuid:
          type: string
          format: uuid
        upload_time:
          type: string
          format: date-time
        price:
          type: number
        duration:
          type: string
          format: date-time
        category:
          type: array
          enum:
            - ANIMALS
            - BEACH
            - CITY
            - FOOD AND DRINK
            - HIKING
          items:
            type: string
        tour_location:
          type: array
          items:
            $ref: '#/components/schemas/TourLocation'
        tour_image:
          type: array
          items:
            $ref: '#/components/schemas/TourImage'
    TourImage:
      title: TourImage
      type: object
      x-tags:
        - tours
      properties:
        id:
          type: integer
        tour_id:
          type: string
        title:
          type: string
        description:
          type: string
        date:
          type: string
          format: date
        image:
          type: string
          format: binary
        primary:
          type: boolean
    TourLocation:
      title: Location
      type: object
      properties:
        id:
          type: integer
        tour_id:
          type: string
        name:
          type: string
        address:
          type: string
        lat:
          type: number
        lng:
          type: number
      x-tags:
        - tours
      description: ''
    Language:
      title: Language
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-tags:
        - language
    EmergencyContact:
      title: EmergencyContact
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        homephone:
          type: string
        mobilephone:
          type: string
        workphone:
          type: string
        address:
          type: string
      x-tags:
        - user
    Currency:
      title: Currency
      type: object
      properties:
        id:
          type: integer
        currency_name:
          type: string
        entity:
          type: string
        alpha_code:
          type: string
        num_code:
          type: integer
    Review:
      title: Review
      type: object
      properties:
        id:
          type: string
        reviewer_id:
          type: string
        reviewee_id:
          type: string
        tour_id:
          type: string
        review_type:
          type: string
          enum:
            - GUIDE
            - CUSTOMER
        rating:
          type: number
        comment:
          type: string
      x-tags:
        - review
      description: ''
  securitySchemes:
    API Key - 1:
      type: http
      scheme: basic
tags:
  - name: user
    description: Operations about user
  - name: tours
    description: Operations related to tours
