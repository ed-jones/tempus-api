openapi: 3.0.0
info:
  title: Tempus Tours
  version: 0.1.0
  description: Connecting tour guides with customers
  contact:
    name: Ed
    url: 'https://edjones.me'
    email: contact@edjones.me
servers:
  - description: Local API
    url: 'http://127.0.0.1:5000'
  - url: 'https://api.tempus.tours'
    description: Remote API
paths:
  '/user/{uuid}':
    get:
      tags:
        - user
      parameters:
        - name: uuid
          in: path
          description: The UUID to be fetched
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
              examples: {}
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
      operationId: addUser
      description: Get user by UUID
      summary: Get user by uuid
    parameters:
      - schema:
          type: string
        name: uuid
        in: path
        required: true
    patch:
      summary: Update User
      operationId: patch-user-uuid
      responses:
        '200':
          description: OK
      description: |-
        Updates user by UUID
        This can only be done by the logged in user.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
  /user/logout:
    post:
      summary: Logout
      operationId: post-user-logout
      responses:
        '200':
          description: OK
      description: Logs out current logged in user session
      tags:
        - user
  /user/login:
    post:
      tags:
        - user
      description: Logs user into the system
      parameters: []
      responses:
        '200':
          description: Successfully logged in
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
      operationId: loginUser
      summary: Login User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
  /user/add:
    post:
      tags:
        - user
      summary: Create user
      description: ''
      operationId: createUser
      responses:
        '200':
          description: successful operation
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoad'
        description: Created user object
        required: true
    parameters: []
  /tours:
    parameters: []
    get:
      summary: Get Tours
      operationId: get-tours
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: Tour
                type: array
                items:
                  $ref: '#/components/schemas/TourDump'
              examples:
                example-1: {}
      description: Returns a list of tours given certain parameters
      parameters:
        - schema:
            type: number
            default: 10
            maximum: 100
            minimum: 0
            exclusiveMaximum: true
          in: query
          name: num
          description: Number of tours in returned list
        - schema:
            type: array
            enum:
              - animals
              - beaches
              - cooking
              - hiking
              - group
              - all
            default: all
          in: query
          description: Tour category
          name: category
        - schema:
            type: array
            enum:
              - rating
              - duration
              - price
              - upload_time
            maxLength: 0
          in: query
          name: order_by
          description: Criteria to order the returned list by
        - schema:
            type: number
          in: query
          name: max_distance
          description: The maximum distance to get results for (km)
        - schema:
            type: number
          in: query
          name: min_distance
          description: The maximum distance to get results for (km)
        - schema:
            type: number
          in: query
          name: max_rating
          description: The maximum rating to get results for
        - schema:
            type: number
          in: query
          name: min_rating
          description: The minimum rating to get results for
        - schema:
            type: integer
          in: query
          name: max_upload_time
          description: The maximum age to get results for (days)
        - schema:
            type: integer
          in: query
          name: min_upload_time
          description: The minimum age to get results for (days)
        - schema:
            type: integer
          in: query
          name: max_duration
          description: The maximum duration to get results for (minutes)
        - schema:
            type: integer
          in: query
          name: min_duration
          description: The minimum duration to get results for (minutes)
        - schema:
            type: number
          in: query
          name: max_price
          description: The maximum price to get results for
        - schema:
            type: number
          in: query
          name: min_price
          description: The minimum price to get results for
        - schema:
            type: string
            enum:
              - asc
              - desc
          in: query
          name: sort
          description: Whether to order by ascending
        - schema:
            type: integer
          in: query
          name: page
          description: Page number
        - schema:
            type: string
          in: query
          name: lat
          description: Latitude (only needed when sorting by distance)
        - schema:
            type: string
          in: query
          name: lng
          description: Longitude (only needed when sorting by distance)
      tags:
        - tours
  '/tour/{uuid}':
    parameters:
      - schema:
          type: string
        name: uuid
        in: path
        required: true
    get:
      summary: Get Tour By UUID
      tags:
        - tours
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourDump'
              examples:
                example-1: {}
      operationId: get-tour-uuid
      description: Get tour details by UUID
    delete:
      summary: Delete Tour
      operationId: delete-tour-uuid
      responses:
        '200':
          description: OK
      description: |-
        Delete an existing tour by UUID
        This can only be done by the tour guide
      tags:
        - tours
      requestBody: {}
      security:
        - basicAuth: []
    patch:
      summary: Update Tour
      operationId: patch-tour-uuid
      responses:
        '200':
          description: OK
      description: |-
        Update an existing tour by UUID
        This can only be done by the tour guide
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TourLoad'
            examples: {}
      tags:
        - tours
      security:
        - basicAuth: []
  /tour/add:
    post:
      summary: Add tour
      operationId: post-tour
      responses:
        '200':
          description: OK
      description: Add a tour
      tags:
        - tours
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TourLoad'
        description: ''
    parameters: []
  /users/me:
    get:
      summary: Get Me
      tags:
        - user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserGet'
      operationId: get-users-me
      requestBody: {}
      description: Get user details for current logged in user
      security:
        - basicAuth: []
    patch:
      summary: Update Me
      operationId: patch-users-me
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPost'
        description: ''
      tags:
        - user
  '/user/{uuid}/archive':
    parameters:
      - schema:
          type: string
        name: uuid
        in: path
        required: true
    post:
      summary: Archive User
      operationId: post-user-uuid-archive
      responses:
        '200':
          description: OK
      description: |-
        Archives user by UUID
        This can only be done by the logged in user
      tags:
        - user
  '/user/{uuid}/add/language/':
    parameters:
      - schema:
          type: string
        name: uuid
        in: path
        required: true
    post:
      summary: Add Language
      operationId: post-user-uuid-languages
      responses:
        '200':
          description: OK
      description: |-
        Add a language to a user
        This can only be done by the logged in user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Language'
      tags:
        - user
  '/user/{uuid}/add/emergency_contact':
    parameters:
      - schema:
          type: string
        name: uuid
        in: path
        required: true
    post:
      summary: Add Emergency Contact
      operationId: post-user-uuid-emergency_contact
      responses:
        '200':
          description: OK
      description: |-
        Add an emergency contact to a user
        This can only be done by the logged in user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmergencyContact'
      tags:
        - user
components:
  schemas:
    UserCommon:
      type: object
      x-examples: {}
      title: User Common
      x-tags:
        - user
      description: "Very basic user schema, doesn't include password, uuid, ratings, languages, emergency_contacts, active, date_created, photo"
      properties:
        email:
          type: string
          format: email
        firstname:
          type: string
        lastname:
          type: string
        dob:
          type: string
        mobile:
          type: string
        bio:
          type: string
        website:
          type: string
        location:
          $ref: '#/components/schemas/Location'
      required:
        - email
        - firstname
        - lastname
    TourCommon:
      title: Tour Common
      type: object
      x-examples: {}
      x-tags:
        - tours
      description: "Basic tour schema, doesn't include tour_location, tour_image"
      properties:
        guide_id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        price:
          type: number
        duration:
          type: number
          format: time
        category:
          type: array
          enum:
            - ANIMALS
            - BEACH
            - CITY
            - FOOD AND DRINK
            - HIKING
          items:
            type: string
        location:
          $ref: '#/components/schemas/Location'
        image_url:
          type: string
    Location:
      title: Location
      type: object
      description: ''
      x-tags:
        - location
      properties:
        id:
          type: integer
        tour_id:
          type: string
        name:
          type: string
        address:
          type: string
        lat:
          type: number
        lng:
          type: number
        primary:
          type: boolean
    Language:
      title: Language
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      x-tags:
        - language
    EmergencyContact:
      title: EmergencyContact
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: string
        firstname:
          type: string
        lastname:
          type: string
        homephone:
          type: string
        mobilephone:
          type: string
        workphone:
          type: string
        address:
          type: string
      x-tags:
        - user
    Currency:
      title: Currency
      type: object
      properties:
        id:
          type: integer
        currency_name:
          type: string
        entity:
          type: string
        alpha_code:
          type: string
        num_code:
          type: integer
    Review:
      title: Review
      type: object
      properties:
        id:
          type: string
        reviewer_id:
          type: string
        reviewee_id:
          type: string
        tour_id:
          type: string
        review_type:
          type: string
          enum:
            - GUIDE
            - CUSTOMER
        rating:
          type: number
        comment:
          type: string
      x-tags:
        - review
      description: ''
    UserDump:
      x-tags:
        - user
      description: Fields to be returned when you get a user
      title: Dump User
      x-examples: {}
      allOf:
        - $ref: '#/components/schemas/UserBasic'
        - type: object
          properties:
            uuid:
              type: string
            emergency_contacts:
              type: array
              items:
                $ref: '#/components/schemas/EmergencyContact'
            languages:
              type: array
              items:
                $ref: '#/components/schemas/Language'
            date_created:
              type: integer
            photo:
              type: string
    UserLoad:
      title: Load User
      allOf:
        - $ref: '#/components/schemas/UserCommon'
        - type: object
          properties:
            password:
              type: string
          required:
            - password
      description: Fields that can be filled out when you add a user
      x-tags:
        - user
    TourDump:
      allOf:
        - type: object
          properties:
            rating:
              type: number
            upload_time:
              type: integer
            uuid:
              type: string
        - $ref: '#/components/schemas/TourCommon'
      title: Dump Tour
    TourLoad:
      title: Load Tour
      allOf:
        - $ref: '#/components/schemas/TourCommon'
        - type: object
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
tags:
  - name: user
    description: Operations about user
  - name: tours
    description: Operations related to tours
